/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/parties_with_names": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.parties_with_names.id"];
          name?: parameters["rowFilter.parties_with_names.name"];
          pin?: parameters["rowFilter.parties_with_names.pin"];
          visited_at?: parameters["rowFilter.parties_with_names.visited_at"];
          created_at?: parameters["rowFilter.parties_with_names.created_at"];
          international?: parameters["rowFilter.parties_with_names.international"];
          generated_name?: parameters["rowFilter.parties_with_names.generated_name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["parties_with_names"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** parties_with_names */
          parties_with_names?: definitions["parties_with_names"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.parties_with_names.id"];
          name?: parameters["rowFilter.parties_with_names.name"];
          pin?: parameters["rowFilter.parties_with_names.pin"];
          visited_at?: parameters["rowFilter.parties_with_names.visited_at"];
          created_at?: parameters["rowFilter.parties_with_names.created_at"];
          international?: parameters["rowFilter.parties_with_names.international"];
          generated_name?: parameters["rowFilter.parties_with_names.generated_name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.parties_with_names.id"];
          name?: parameters["rowFilter.parties_with_names.name"];
          pin?: parameters["rowFilter.parties_with_names.pin"];
          visited_at?: parameters["rowFilter.parties_with_names.visited_at"];
          created_at?: parameters["rowFilter.parties_with_names.created_at"];
          international?: parameters["rowFilter.parties_with_names.international"];
          generated_name?: parameters["rowFilter.parties_with_names.generated_name"];
        };
        body: {
          /** parties_with_names */
          parties_with_names?: definitions["parties_with_names"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/guests": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guests.id"];
          firstname?: parameters["rowFilter.guests.firstname"];
          email?: parameters["rowFilter.guests.email"];
          created_at?: parameters["rowFilter.guests.created_at"];
          considering?: parameters["rowFilter.guests.considering"];
          lastname?: parameters["rowFilter.guests.lastname"];
          responded_at?: parameters["rowFilter.guests.responded_at"];
          member_of?: parameters["rowFilter.guests.member_of"];
          attending?: parameters["rowFilter.guests.attending"];
          plusOne?: parameters["rowFilter.guests.plusOne"];
          notes?: parameters["rowFilter.guests.notes"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["guests"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** guests */
          guests?: definitions["guests"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guests.id"];
          firstname?: parameters["rowFilter.guests.firstname"];
          email?: parameters["rowFilter.guests.email"];
          created_at?: parameters["rowFilter.guests.created_at"];
          considering?: parameters["rowFilter.guests.considering"];
          lastname?: parameters["rowFilter.guests.lastname"];
          responded_at?: parameters["rowFilter.guests.responded_at"];
          member_of?: parameters["rowFilter.guests.member_of"];
          attending?: parameters["rowFilter.guests.attending"];
          plusOne?: parameters["rowFilter.guests.plusOne"];
          notes?: parameters["rowFilter.guests.notes"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.guests.id"];
          firstname?: parameters["rowFilter.guests.firstname"];
          email?: parameters["rowFilter.guests.email"];
          created_at?: parameters["rowFilter.guests.created_at"];
          considering?: parameters["rowFilter.guests.considering"];
          lastname?: parameters["rowFilter.guests.lastname"];
          responded_at?: parameters["rowFilter.guests.responded_at"];
          member_of?: parameters["rowFilter.guests.member_of"];
          attending?: parameters["rowFilter.guests.attending"];
          plusOne?: parameters["rowFilter.guests.plusOne"];
          notes?: parameters["rowFilter.guests.notes"];
        };
        body: {
          /** guests */
          guests?: definitions["guests"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/std_form": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.std_form.id"];
          firstname?: parameters["rowFilter.std_form.firstname"];
          lastname?: parameters["rowFilter.std_form.lastname"];
          email?: parameters["rowFilter.std_form.email"];
          created_at?: parameters["rowFilter.std_form.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["std_form"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** std_form */
          std_form?: definitions["std_form"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.std_form.id"];
          firstname?: parameters["rowFilter.std_form.firstname"];
          lastname?: parameters["rowFilter.std_form.lastname"];
          email?: parameters["rowFilter.std_form.email"];
          created_at?: parameters["rowFilter.std_form.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.std_form.id"];
          firstname?: parameters["rowFilter.std_form.firstname"];
          lastname?: parameters["rowFilter.std_form.lastname"];
          email?: parameters["rowFilter.std_form.email"];
          created_at?: parameters["rowFilter.std_form.created_at"];
        };
        body: {
          /** std_form */
          std_form?: definitions["std_form"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/parties": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.parties.id"];
          name?: parameters["rowFilter.parties.name"];
          pin?: parameters["rowFilter.parties.pin"];
          visited_at?: parameters["rowFilter.parties.visited_at"];
          created_at?: parameters["rowFilter.parties.created_at"];
          international?: parameters["rowFilter.parties.international"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["parties"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** parties */
          parties?: definitions["parties"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.parties.id"];
          name?: parameters["rowFilter.parties.name"];
          pin?: parameters["rowFilter.parties.pin"];
          visited_at?: parameters["rowFilter.parties.visited_at"];
          created_at?: parameters["rowFilter.parties.created_at"];
          international?: parameters["rowFilter.parties.international"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.parties.id"];
          name?: parameters["rowFilter.parties.name"];
          pin?: parameters["rowFilter.parties.pin"];
          visited_at?: parameters["rowFilter.parties.visited_at"];
          created_at?: parameters["rowFilter.parties.created_at"];
          international?: parameters["rowFilter.parties.international"];
        };
        body: {
          /** parties */
          parties?: definitions["parties"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  parties_with_names: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id?: number;
    /** Format: text */
    name?: string;
    /** Format: text */
    pin?: string;
    /** Format: timestamp with time zone */
    visited_at?: string;
    /** Format: timestamp with time zone */
    created_at?: string;
    /** Format: boolean */
    international?: boolean;
    /** Format: text */
    generated_name?: string;
  };
  guests: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    firstname: string;
    /** Format: text */
    email?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: boolean */
    considering?: boolean;
    /** Format: text */
    lastname: string;
    /** Format: timestamp with time zone */
    responded_at?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `parties.id`.<fk table='parties' column='id'/>
     */
    member_of?: number;
    /**
     * Format: boolean
     * @default false
     */
    attending: boolean;
    /**
     * Format: boolean
     * @default false
     */
    plusOne?: boolean;
    /** Format: text */
    notes?: string;
  };
  /** @description Temporary table for collecting email addresses for STDs */
  std_form: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    firstname: string;
    /** Format: text */
    lastname: string;
    /**
     * Format: text
     * @default
     */
    email?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  /** @description Parties of guests */
  parties: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: text */
    name?: string;
    /**
     * Format: text
     * @default substr((extensions.uuid_generate_v4())::text, 0, 7)
     */
    pin: string;
    /** Format: timestamp with time zone */
    visited_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /**
     * Format: boolean
     * @default false
     */
    international: boolean;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description parties_with_names */
  "body.parties_with_names": definitions["parties_with_names"];
  /** Format: bigint */
  "rowFilter.parties_with_names.id": string;
  /** Format: text */
  "rowFilter.parties_with_names.name": string;
  /** Format: text */
  "rowFilter.parties_with_names.pin": string;
  /** Format: timestamp with time zone */
  "rowFilter.parties_with_names.visited_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.parties_with_names.created_at": string;
  /** Format: boolean */
  "rowFilter.parties_with_names.international": string;
  /** Format: text */
  "rowFilter.parties_with_names.generated_name": string;
  /** @description guests */
  "body.guests": definitions["guests"];
  /** Format: bigint */
  "rowFilter.guests.id": string;
  /** Format: text */
  "rowFilter.guests.firstname": string;
  /** Format: text */
  "rowFilter.guests.email": string;
  /** Format: timestamp with time zone */
  "rowFilter.guests.created_at": string;
  /** Format: boolean */
  "rowFilter.guests.considering": string;
  /** Format: text */
  "rowFilter.guests.lastname": string;
  /** Format: timestamp with time zone */
  "rowFilter.guests.responded_at": string;
  /** Format: bigint */
  "rowFilter.guests.member_of": string;
  /** Format: boolean */
  "rowFilter.guests.attending": string;
  /** Format: boolean */
  "rowFilter.guests.plusOne": string;
  /** Format: text */
  "rowFilter.guests.notes": string;
  /** @description std_form */
  "body.std_form": definitions["std_form"];
  /** Format: bigint */
  "rowFilter.std_form.id": string;
  /** Format: text */
  "rowFilter.std_form.firstname": string;
  /** Format: text */
  "rowFilter.std_form.lastname": string;
  /** Format: text */
  "rowFilter.std_form.email": string;
  /** Format: timestamp with time zone */
  "rowFilter.std_form.created_at": string;
  /** @description parties */
  "body.parties": definitions["parties"];
  /** Format: bigint */
  "rowFilter.parties.id": string;
  /** Format: text */
  "rowFilter.parties.name": string;
  /** Format: text */
  "rowFilter.parties.pin": string;
  /** Format: timestamp with time zone */
  "rowFilter.parties.visited_at": string;
  /** Format: timestamp with time zone */
  "rowFilter.parties.created_at": string;
  /** Format: boolean */
  "rowFilter.parties.international": string;
}

export interface operations {}

export interface external {}
